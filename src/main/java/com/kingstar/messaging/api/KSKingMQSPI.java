/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.kingstar.messaging.api;

public class KSKingMQSPI {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected KSKingMQSPI(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(KSKingMQSPI obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        KSKingMQAPIJNI.delete_KSKingMQSPI(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    KSKingMQAPIJNI.KSKingMQSPI_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    KSKingMQAPIJNI.KSKingMQSPI_change_ownership(this, swigCPtr, true);
  }

  public void OnConnected() {
    if (getClass() == KSKingMQSPI.class) KSKingMQAPIJNI.KSKingMQSPI_OnConnected(swigCPtr, this); else KSKingMQAPIJNI.KSKingMQSPI_OnConnectedSwigExplicitKSKingMQSPI(swigCPtr, this);
  }

  public void OnDisconnected(ReConnectStatus reConnectStatus, ErrorInfo pErrorInfo) {
    if (getClass() == KSKingMQSPI.class) KSKingMQAPIJNI.KSKingMQSPI_OnDisconnected(swigCPtr, this, reConnectStatus.swigValue(), ErrorInfo.getCPtr(pErrorInfo), pErrorInfo); else KSKingMQAPIJNI.KSKingMQSPI_OnDisconnectedSwigExplicitKSKingMQSPI(swigCPtr, this, reConnectStatus.swigValue(), ErrorInfo.getCPtr(pErrorInfo), pErrorInfo);
  }

  public void OnRtnSubscribe(String pQueue, ErrorInfo pErrorInfo) {
    if (getClass() == KSKingMQSPI.class) KSKingMQAPIJNI.KSKingMQSPI_OnRtnSubscribe(swigCPtr, this, pQueue, ErrorInfo.getCPtr(pErrorInfo), pErrorInfo); else KSKingMQAPIJNI.KSKingMQSPI_OnRtnSubscribeSwigExplicitKSKingMQSPI(swigCPtr, this, pQueue, ErrorInfo.getCPtr(pErrorInfo), pErrorInfo);
  }

  public void OnMessage(String routingKey, byte[] pMsgbuf) {
    if (getClass() == KSKingMQSPI.class) KSKingMQAPIJNI.KSKingMQSPI_OnMessage(swigCPtr, this, routingKey, pMsgbuf); else KSKingMQAPIJNI.KSKingMQSPI_OnMessageSwigExplicitKSKingMQSPI(swigCPtr, this, routingKey, pMsgbuf);
  }

  public KSKingMQSPI() {
    this(KSKingMQAPIJNI.new_KSKingMQSPI(), true);
    KSKingMQAPIJNI.KSKingMQSPI_director_connect(this, swigCPtr, true, true);
  }

}
