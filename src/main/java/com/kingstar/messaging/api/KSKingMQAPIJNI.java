/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.kingstar.messaging.api;

public class KSKingMQAPIJNI {
  public final static native int EMPTY_ROW_get();
  public final static native int EMPTY_ID_get();
  public final static native int EMPTY_NO_get();
  public final static native void ErrorInfo_errorId_set(long jarg1, ErrorInfo jarg1_, int jarg2);
  public final static native int ErrorInfo_errorId_get(long jarg1, ErrorInfo jarg1_);
  public final static native void ErrorInfo_errorMessage_set(long jarg1, ErrorInfo jarg1_, String jarg2);
  public final static native String ErrorInfo_errorMessage_get(long jarg1, ErrorInfo jarg1_);
  public final static native long new_ErrorInfo();
  public final static native void delete_ErrorInfo(long jarg1);
  public final static native int ReConnectStatus_ReConnectFail_get();
  public final static native int ReConnectStatus_ReConnecting_get();
  public final static native void QueueType_queue_set(long jarg1, QueueType jarg1_, String jarg2);
  public final static native String QueueType_queue_get(long jarg1, QueueType jarg1_);
  public final static native void QueueType_bindingKey_set(long jarg1, QueueType jarg1_, String jarg2);
  public final static native String QueueType_bindingKey_get(long jarg1, QueueType jarg1_);
  public final static native void QueueType_offset_set(long jarg1, QueueType jarg1_, int jarg2);
  public final static native int QueueType_offset_get(long jarg1, QueueType jarg1_);
  public final static native void QueueType_durable_set(long jarg1, QueueType jarg1_, int jarg2);
  public final static native int QueueType_durable_get(long jarg1, QueueType jarg1_);
  public final static native long new_QueueType();
  public final static native void delete_QueueType(long jarg1);
  public final static native void ReqSubscribeField_cnt_set(long jarg1, ReqSubscribeField jarg1_, int jarg2);
  public final static native int ReqSubscribeField_cnt_get(long jarg1, ReqSubscribeField jarg1_);
  public final static native void ReqSubscribeField_elems_set(long jarg1, ReqSubscribeField jarg1_, long jarg2, QueueType jarg2_);
  public final static native long ReqSubscribeField_elems_get(long jarg1, ReqSubscribeField jarg1_);
  public final static native long new_ReqSubscribeField();
  public final static native void delete_ReqSubscribeField(long jarg1);
  public final static native int API_ERROR_CODE_BASE_get();
  public final static native int SUCCESS_get();
  public final static native int CONFIG_FILE_LOAD_FAILED_get();
  public final static native int LOG_INIT_FAILED_get();
  public final static native int TRADE_API_INIT_FAILED_get();
  public final static native int KFTS_API_CREATE_FAILED_get();
  public final static native int KFTS_API_SET_OPT_FAILED_get();
  public final static native int KFTS_API_REG_FRONT_FAILED_get();
  public final static native int NEW_API_GROUP_FAILED_get();
  public final static native int FRONT_CONFIG_NUM_ERR_get();
  public final static native int COMM_PARA_IS_NULL_get();
  public final static native int CREATE_TO_MANY_TRADE_API_get();
  public final static native int TRADE_API_NOT_ALL_LOGINED_get();
  public final static native int MAIN_API_START_LOGIN_FAILED_get();
  public final static native int TRADE_API_START_LOGIN_FAILED_get();
  public final static native int PUSH_API_START_LOGIN_FAILED_get();
  public final static native int SUBSCRIBE_TOPIC_FAILED_get();
  public final static native int MAIN_API_NOT_RELAY_LOGIN_get();
  public final static native int NEW_OBJ_RETURN_NULL_get();
  public final static native int RESUME_FROM_FLOW_FILE_FAILED_get();
  public final static native int PUBLIC_FLOW_RESUME_TIMEOUT_get();
  public final static native int OPEN_FLOW_FILE_FAILED_get();
  public final static native int CREATE_MDB_ERROR_get();
  public final static native int GET_SUBSRIBE_FLOW_ERROR_get();
  public final static native int SUBSCRIBE_TOPIC_COUNT_IS_ZERO_get();
  public final static native int NO_ACTIVE_PUSH_API_get();
  public final static native int NO_ACTIVE_TRADE_API_get();
  public final static native int NO_ACTIVE_MAIN_API_get();
  public final static native int USER_LOGIN_FAILED_get();
  public final static native int GENERATE_TOKEN_ERR_get();
  public final static native int TOKEN_STRING_ARRAY_ILLEGAL_get();
  public final static native int APP_ID_IN_TOKEN_IS_ERR_get();
  public final static native int TOKEN_CHECK_FAILED_get();
  public final static native int PACK_ERROR_get();
  public final static native int ORDER_FAIL_BY_KFTS_get();
  public final static native int LOGOUT_FAILED_get();
  public final static native int INVALID_ORDER_COUNT_get();
  public final static native int CALL_QUERY_SERVICE_FAILED_get();
  public final static native int CAN_NOT_FIND_CELL_get();
  public final static native int CAN_NOT_FIND_CUST_NO_get();
  public final static native int USER_TYPE_ERROR_get();
  public final static native int UNPACK_ERROR_get();
  public final static native int NETWORK_ERROR_get();
  public final static native int INVALID_ACCOUNT_get();
  public final static native int INVALID_IP_get();
  public final static native int INVALID_MAC_get();
  public final static native int LICENSE_EXPIRED_get();
  public final static native int OLD_VERSION_get();
  public final static native int MD5_CHECK_FAILURE_get();
  public final static native int GENERAL_FAILURE_get();
  public final static native int RELAY_CONFIG_EMPTY_get();
  public final static native int INVALID_FRONT_TYPE_get();
  public final static native int INVALID_PARA_get();
  public final static native int NO_ACTIVE_QUERY_API_get();
  public final static native int USER_LOGIN_AUTH_FAIL_get();
  public final static native int NO_SOURCE_TERMINAL_INFO_get();
  public final static native int STREAM_LIMITTED_get();
  public final static native int INVALID_BUSINESS_TYPE_get();
  public final static native int NOT_FIND_SEC_INFO_get();
  public final static native int NOT_FIND_IP_AND_MAC_get();
  public final static native int SEND_MESSAGE_FAILED_get();
  public final static native int NOT_EXIST_MD5_INFO_get();
  public final static native int SUBSCRIBE_TOPIC_ERROR_get();
  public final static native void delete_KSKingMQSPI(long jarg1);
  public final static native void KSKingMQSPI_OnConnected(long jarg1, KSKingMQSPI jarg1_);
  public final static native void KSKingMQSPI_OnConnectedSwigExplicitKSKingMQSPI(long jarg1, KSKingMQSPI jarg1_);
  public final static native void KSKingMQSPI_OnDisconnected(long jarg1, KSKingMQSPI jarg1_, int jarg2, long jarg3, ErrorInfo jarg3_);
  public final static native void KSKingMQSPI_OnDisconnectedSwigExplicitKSKingMQSPI(long jarg1, KSKingMQSPI jarg1_, int jarg2, long jarg3, ErrorInfo jarg3_);
  public final static native void KSKingMQSPI_OnRtnSubscribe(long jarg1, KSKingMQSPI jarg1_, String jarg2, long jarg3, ErrorInfo jarg3_);
  public final static native void KSKingMQSPI_OnRtnSubscribeSwigExplicitKSKingMQSPI(long jarg1, KSKingMQSPI jarg1_, String jarg2, long jarg3, ErrorInfo jarg3_);
  public final static native void KSKingMQSPI_OnMessage(long jarg1, KSKingMQSPI jarg1_, String jarg2, byte[] jarg3, long jarg5);
  public final static native void KSKingMQSPI_OnMessageSwigExplicitKSKingMQSPI(long jarg1, KSKingMQSPI jarg1_, String jarg2, byte[] jarg3, long jarg5);
  public final static native long new_KSKingMQSPI();
  public final static native void KSKingMQSPI_director_connect(KSKingMQSPI obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void KSKingMQSPI_change_ownership(KSKingMQSPI obj, long cptr, boolean take_or_release);
  public final static native long KSKingMQ_CreateKingMQ__SWIG_0(String jarg1);
  public final static native long KSKingMQ_CreateKingMQ__SWIG_1();
  public final static native void KSKingMQ_DestroyKingMQ(long jarg1, KSKingMQ jarg1_);
  public final static native String KSKingMQ_GetApiVersion();
  public final static native int KSKingMQ_ConnectServer(long jarg1, KSKingMQ jarg1_, long jarg2, KSKingMQSPI jarg2_);
  public final static native int KSKingMQ_ReqSubscribe(long jarg1, KSKingMQ jarg1_, long jarg2, ReqSubscribeField jarg2_);
  public final static native int KSKingMQ_publish(long jarg1, KSKingMQ jarg1_, String jarg2, byte[] jarg3, int jarg5);
  public final static native long new_KSKingMQ();
  public final static native void KSKingMQ_director_connect(KSKingMQ obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void KSKingMQ_change_ownership(KSKingMQ obj, long cptr, boolean take_or_release);

  public static void SwigDirector_KSKingMQSPI_OnConnected(KSKingMQSPI jself) {
    jself.OnConnected();
  }
  public static void SwigDirector_KSKingMQSPI_OnDisconnected(KSKingMQSPI jself, int reConnectStatus, long pErrorInfo) {
    jself.OnDisconnected(ReConnectStatus.swigToEnum(reConnectStatus), (pErrorInfo == 0) ? null : new ErrorInfo(pErrorInfo, false));
  }
  public static void SwigDirector_KSKingMQSPI_OnRtnSubscribe(KSKingMQSPI jself, String pQueue, long pErrorInfo) {
    jself.OnRtnSubscribe(pQueue, (pErrorInfo == 0) ? null : new ErrorInfo(pErrorInfo, false));
  }
  public static void SwigDirector_KSKingMQSPI_OnMessage(KSKingMQSPI jself, String routingKey, byte[] pMsgbuf, long seq_no) {
    jself.OnMessage(routingKey, pMsgbuf, seq_no);
  }
  public static int SwigDirector_KSKingMQ_ConnectServer(KSKingMQ jself, long pSpi) {
    return (jself.ConnectServer((pSpi == 0) ? null : new KSKingMQSPI(pSpi, false))).swigValue();
  }
  public static int SwigDirector_KSKingMQ_ReqSubscribe(KSKingMQ jself, long pReqSubscription) {
    return (jself.ReqSubscribe((pReqSubscription == 0) ? null : new ReqSubscribeField(pReqSubscription, false))).swigValue();
  }
  public static int SwigDirector_KSKingMQ_publish(KSKingMQ jself, String routingKey, byte[] pMsgbuf, int durable) {
    return (jself.publish(routingKey, pMsgbuf, durable)).swigValue();
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
